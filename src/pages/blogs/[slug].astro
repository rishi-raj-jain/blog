---
import dayjs from "dayjs";
import H1 from "@/components/H1.astro";
import getBlogs from "@/utils/getBlogs";
import { fade } from "astro:transitions";
import Layout from "@/layouts/Layout.astro";
import Prose from "@/components/Prose.astro";
import { type CollectionEntry } from "astro:content";
import Breadcrumbs from "@/components/Breadcrumbs.astro";
import DeprecatedBar from "@/components/DeprecatedBar.astro";

interface Props {
  blog: CollectionEntry<"blogs">;
}

export async function getStaticPaths() {
  const blogs = await getBlogs();
  return blogs.map((blog) => ({
    params: { slug: blog.slug },
    props: { blog },
  }));
}

const { blog } = Astro.props;

const { Content, remarkPluginFrontmatter: frontmatter } = await blog.render();
const { title, slug, tags, words, readingTime, lastModified } = frontmatter;
---

<Layout title={title}>
  <Breadcrumbs
    crumbs={[
      { label: "Blogs", href: "/blogs" },
      { label: title, href: `/blogs/${slug}` },
    ]}
  />
  <H1 transitionName={slug} class="font-semibold">
    {title}
  </H1>
  <p
    class="text-xs text-light-3 dark:text-dark-3"
    transition:animate={fade({ duration: "0.5s" })}
  >
    <span>
      Updated at {dayjs(lastModified).format("YYYY.MM.DD")},
    </span>
    <span>{words} words</span>,
    <span>{readingTime}</span>
  </p>
  <DeprecatedBar deprecated={frontmatter.deprecated} />
  <div transition:animate={fade({ duration: "0.5s" })}>
    <Prose>
      <Content />
    </Prose>
  </div>
  <div class="flex mt-8">
    {
      tags.map((tag: string) => (
        <a
          href={`/tags/${tag.toLowerCase()}`}
          class:list={[
            "group flex text-sm mr-2 hover:text-primary duration-300",
            "text-light-3 dark:text-dark-3",
          ]}
        >
          <svg
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
            class:list={[
              "w-4 group-hover:fill-primary duration-300",
              "fill-light-3 dark:fill-dark-3",
            ]}
          >
            <path d="M7.78428 14L8.2047 10H4V8H8.41491L8.94043 3H10.9514L10.4259 8H14.4149L14.9404 3H16.9514L16.4259 8H20V10H16.2157L15.7953 14H20V16H15.5851L15.0596 21H13.0486L13.5741 16H9.58509L9.05957 21H7.04855L7.57407 16H4V14H7.78428ZM9.7953 14H13.7843L14.2047 10H10.2157L9.7953 14Z" />
          </svg>
          {tag.toLowerCase()}
        </a>
      ))
    }
  </div>
  <div class="border-t pt-16 mt-16 dark:border-light-2">
    <div class="giscus"></div>
  </div>
</Layout>

<script
  async
  src="https://giscus.app/client.js"
  data-repo="CaptainOfPhB/blog"
  data-repo-id="R_kgDOK453LA"
  data-category="Announcements"
  data-category-id="DIC_kwDOK453LM4CcVKf"
  data-mapping="pathname"
  data-strict="0"
  data-reactions-enabled="1"
  data-emit-metadata="0"
  data-input-position="top"
  data-theme="preferred_color_scheme"
  data-lang="en"
  crossorigin="anonymous"></script>

<!-- Watch the classname change of html element-->
<script>
  const rootEl = document.querySelector("html");

  const attrObserver = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (
        mutation.type !== "attributes" &&
        mutation.attributeName !== "class"
      ) {
        return;
      }
      onThemeChange();
    });
  });

  function observeClassChange() {
    if (!rootEl) return;
    attrObserver.observe(rootEl, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }

  function sendMessage<T>(message: T) {
    const iframe = document.querySelector<HTMLIFrameElement>(
      "iframe.giscus-frame"
    );
    if (!iframe) return;
    console.log("ðŸš€ -> iframe:", iframe);
    setTimeout(() => {
      iframe.contentWindow?.postMessage(
        { giscus: message },
        "https://giscus.app"
      );
    }, 1000);
  }

  function onThemeChange() {
    if (!rootEl) return;
    const theme = rootEl.classList.contains("dark") ? "dark" : "light";
    sendMessage({ setConfig: { theme } });
  }

  document.addEventListener("astro:page-swap", () => {
    onThemeChange();
  });

  document.addEventListener("astro:page-load", () => {
    observeClassChange();
    onThemeChange();

    const iframe = document.querySelector<HTMLIFrameElement>(
      "iframe.giscus-frame"
    );
    console.log("ðŸš€ -> document.addEventListener -> iframe:", iframe);
  });
</script>

<!-- Put the toc into the detail element -->
<script>
  document.addEventListener("astro:page-load", () => {
    const tocHeader = document.querySelector("#table-of-contents");

    // h1 element will take no effect
    if (tocHeader?.tagName === "H1") {
      console.error("The heading of TOC should be h2~h6, not h1");
      return;
    }

    tocHeader?.classList.add("hidden");

    const tocBody = document.querySelector("#table-of-contents ~ ul");

    // don't remove this, or it will cause an error
    if (!tocBody) return;

    tocBody.classList.add("m-0");

    const details = document.createElement("details");
    details.id = "details-table-of-contents";
    details.classList.add(
      "border",
      "open:pb-4",
      "select-none",
      "cursor-pointer",
      "bg-white",
      "dark:bg-code-dark-bg",
      "border-dark-2",
      "dark:border-light-3"
    );

    const summary = document.createElement("summary");
    summary.classList.add("p-4");
    summary.innerHTML = "Table of Content";

    details.appendChild(summary);
    details.appendChild(tocBody);

    tocHeader?.replaceWith(details);
  });
</script>
